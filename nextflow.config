manifest {
  name = 'FloWuenne/nf_molcart'
  author = 'Florian Wuennemann'
  homePage = 'https://github.com/FloWuenne/nf_molcart'
  description = 'A nextflow pipeline to process Molecular Cartography data from Resolve Biosciences.'
}

dag {
  overwrite = true
}

profiles {

  docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

  slurm {
    process.exectur = 'slurm'
  }

  test { 
    includeConfig 'conf/test.config' 
  }
}

params {

  input = null
  outdir = null

  // MultiQC
  multiqc_config = null
  multiqc_logo = null
  
  // Ilastik models
  ilastik_model_dir = null
  ilastik_pixelprob_model = "${params.ilastik_model_dir}/ilastik_pixelprob.ilp"
  ilastik_multicut_model = "${params.ilastik_model_dir}/ilastik_multicut.ilp"

  //Cellpose params
  cellpose_model = null

  // Specify which segmentation algorithms to skip
  skip_mesmer_nuclear = false
  skip_mesmer_wholecell = false
  skip_cellpose= false
  skip_ilastik = false
  skip_multiqc = false
  


  // Whether to create ilastik training images or not
  create_training_set = false

  // Location where to put the ilastik training images
  ilastik_training_dir = "${params.outdir}/ilastik_training_set"
  crop_sum_dir = "${params.outdir}/crop_summaries"
  tiff_training_dir = "${params.outdir}/tiff_training_set"
  crop_overview_dir = "${params.outdir}/tiff_training_crops"

  // Params for MINDAGAP_MINDAGAP
  mindagap_boxsize = 7
  mindagap_loopnum = 100

  // Parameters for MK_ILASTIK_TRAINING_STACKS
  crop_size_x = 500
  crop_size_y = 500
  nonzero_fraction = 0.1
  crop_amount = 4
  channel_ids = "1 2"

  // Parameters for filtering semgentation masks by size
  mask_min_area = 200
  mask_max_area = 200000
}

process {
      withName: "FILTER_MASK_CELLPOSE" {
        publishDir = [
          path: { "${params.outdir}/discarded_masks/" },
          mode: 'copy',
          pattern: "discarded_masks.tiff",
          saveAs: { filename -> "${meta.id}_cellpose.discarded_masks.tif" }
     ]
        publishDir = [
          path: { "${params.outdir}/retained_masks/" },
          mode: 'copy',
          pattern: "retained_masks.tiff",
          saveAs: { filename -> "${meta.id}_cellpose.retained_masks.tif" }
     ]
    }
    withName: "FILTER_MASK_MESMER_NUCLEAR" {
        publishDir = [
          path: { "${params.outdir}/discarded_masks/" },
          mode: 'copy',
          pattern: "discarded_masks.tiff",
          saveAs: { filename -> "${meta.id}_mesmer_nuclear.discarded_masks.tif" }
     ]     
        publishDir = [
          path: { "${params.outdir}/retained_masks/" },
          mode: 'copy',
          pattern: "retained_masks.tiff",
          saveAs: { filename -> "${meta.id}_mesmer_nuclear.retained_masks.tif" }
     ]
    }
    withName: "FILTER_MASK_MESMER_WHOLECELL" {
        publishDir = [
          path: { "${params.outdir}/discarded_masks/" },
          mode: 'copy',
          pattern: "discarded_masks.tiff",
          saveAs: { filename -> "${meta.id}_mesmer_wholecell.discarded_masks.tif" }
     ]
        publishDir = [
          path: { "${params.outdir}/retained_masks/" },
          mode: 'copy',
          pattern: "retained_masks.tiff",
          saveAs: { filename -> "${meta.id}_mesmer_wholecell.retained_masks.tif" }
     ]
    }
    withName: "FILTER_MASK_ILASTIK" {
        publishDir = [
          path: { "${params.outdir}/discarded_masks/" },
          mode: 'copy',
          pattern: "discarded_masks.tiff",
          saveAs: { filename -> "${meta.id}_ilastik.discarded_masks.tif" }
     ]
        publishDir = [
          path: { "${params.outdir}/retained_masks/" },
          mode: 'copy',
          pattern: "retained_masks.tiff",
          saveAs: { filename -> "${meta.id}_ilastik.retained_masks.tif" }
     ]
    }
    withName: "MINDAGAP_MINDAGAP" {
      ext.args= ""
    }
    withName: MINDAGAP_DUPLICATEFINDER{
      publishDir = [
        path: { "${params.outdir}/dedup_spots" },
        mode: 'copy',
        pattern: "*markedDups.txt"
     ]
    }
    withName: "APPLY_CLAHE_DASK"{
      publishDir = [
        path: { "${params.outdir}/preprocessed" },
        mode: 'copy',
        pattern: "*.clahe.tiff"
     ]
    }
    withName: "PROJECT_SPOTS" {
        publishDir = [
          path: { "${params.outdir}/spot_projections" },
          mode: 'copy',
     ]
    }
    withName: "ILASTIK_PIXELCLASSIFICATION" {
      ext.args = '--output_format=hdf5 --export_source="Probabilities"'
    }
    withName: "ILASTIK_MULTICUT" {
        publishDir = [
          path: { "${params.outdir}/segmentations/ilastik_multicut" },
          mode: 'copy',
          pattern: "*.tif",
          saveAs: { filename -> "${meta.id}_ilastik_multicut_mask.tif" }
     ]
    }
    withName: "DEEPCELL_MESMER" {
      memory = "32GB"
      cpus = 1
      ext.args = '--image-mpp=0.138 --nuclear-channel 0 --compartment whole-cell'
      publishDir = [
          path: { "${params.outdir}/segmentations/mesmer" },
          mode: 'copy',
          pattern: "*.tif",
          saveAs: { filename -> "${meta.id}_mesmer_$filename" }
     ]
    }
    withName: "CELLPOSE" {
      ext.args = '--channel_axis 0 --chan 2 --chan2 1 --no_npy --diameter 60 --flow_threshold 0.7 --use_gpu'
      publishDir = [
          path: { "${params.outdir}/segmentations/cellpose" },
          mode: 'copy',
          pattern: "*.tif",
          saveAs: { filename -> "${meta.id}_cellpose_mask.tif" }
     ]
    }
    withName: "MCQUANT_MESMER_NUCLEAR" {
      ext.args = "--intensity_props intensity_sum"
      publishDir = [
          path: { "${params.outdir}/quantification/mesmer_nuclear" },
          mode: 'copy',
          pattern: "*.csv"
     ]
    }
    withName: "MCQUANT_MESMER_WHOLECELL" {
      ext.args = "--intensity_props intensity_sum"
      publishDir = [
          path: { "${params.outdir}/quantification/mesmer_wholecell" },
          mode: 'copy',
          pattern: "*.csv"
     ]
    }
    withName: "MCQUANT_CELLPOSE" {
      ext.args = "--intensity_props intensity_sum"
      publishDir = [
          path: { "${params.outdir}/quantification/cellpose" },
          mode: 'copy',
          pattern: "*.csv"
     ]
    }
    withName: "MCQUANT_ILASTIK" {
      ext.args = "--intensity_props intensity_sum"
      publishDir = [
          path: { "${params.outdir}/quantification/ilastik_multicut" },
          mode: 'copy',
          pattern: "*.csv"
     ]
    }
    withName: "SCIMAP_MCMICRO_MESMER_NUCLEAR" {
      publishDir = [
          path: { "${params.outdir}/scimap/mesmer_nuclear" },
          mode: 'copy',
          pattern: "*.h5ad"
     ]
    }
    withName: "SCIMAP_MCMICRO_MESMER_WHOLECELL" {
      publishDir = [
          path: { "${params.outdir}/scimap/mesmer_wholecell" },
          mode: 'copy',
          pattern: "*.h5ad"
     ]
    }
    withName: "SCIMAP_MCMICRO_CELLPOSE" {
      publishDir = [
          path: { "${params.outdir}/scimap/cellpose" },
          mode: 'copy',
          pattern: "*.h5ad"
     ]
    }
    withName: "SCIMAP_MCMICRO_ILASTIK" {
      publishDir = [
          path: { "${params.outdir}/scimap/ilastik_multicut" },
          mode: 'copy',
          pattern: "*.h5ad"
     ]
    }
    withName: "MOLCART_QC_*" {
      publishDir = [
          path: { "${params.outdir}/QC" },
          mode: 'copy',
          pattern: "*.csv"
     ]
    }
    withName: "MULTIQC" {
      publishDir = [
          path: { "${params.outdir}/multiQC" },
          mode: 'copy'
     ]
    }
}

docker.runOptions = '--entrypoint ""'
